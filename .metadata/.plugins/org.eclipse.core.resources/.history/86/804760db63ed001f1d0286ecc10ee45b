package com.inicio;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.JdbcUserDetailsManager;

public class SecurityConfig {

//	https://medium.com/@CodeWithTech/spring-security-with-jdbcuserdetailsmanager-and-custom-userdetailsservice-a-complete-guide-248ddce0196c}
// https://medium.com/@tarikboudaa/a-crud-application-secured-using-a-customized-spring-security-configuration-51a5a4ccda
	@EnableWebSecurity
	@Configuration
	public class SpringConfig {
		
		AuthenticationManager auth;
		
		@Bean
		public AuthenticationManager authManager(AuthenticationConfiguration conf) throws Exception{
			auth=conf.getAuthenticationManager();
			return auth;
		}
		
		
		@Bean
		public JdbcUserDetailsManager usersDetailsJdbc(PasswordEncoder passwordEncoder) {
			DriverManagerDataSource ds=new DriverManagerDataSource();
			ds.setDriverClassName("org.postgresql.Driver");
			ds.setUrl("jdbc:postgresql://localhost:5432/usuarios?serverTimezone=UTC");
			ds.setUsername("root");
			ds.setPassword("admin");
			JdbcUserDetailsManager jdbcDetails=new JdbcUserDetailsManager(ds);
			
			jdbcDetails.setUsersByUsernameQuery("select email, password, enabled"
	           	+ " from usuarios where id_usuario=?");
			jdbcDetails.setAuthoritiesByUsernameQuery("select u.user, r.rol "
	           	+ "from roles r JOIN user_roles j ON r.id=j.id_rol "
	           	+ "JOIN usuarios u ON j.id_usuario=u.id_usuario where r.id=?");
		    jdbcDetails.setPasswordEncoder(passwordEncoder); // ðŸ”¹ Â¡AquÃ­ asignamos el encoder!

			return jdbcDetails;
		}
		@Bean
		public PasswordEncoder passwordEncoder() {
		    return new BCryptPasswordEncoder();
		}
}
	
}