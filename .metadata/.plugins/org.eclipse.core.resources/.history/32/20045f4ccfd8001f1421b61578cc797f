package com.test.repository;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.transaction.annotation.Transactional;

import com.model.FlightEntity;
import com.repository.FlightEntityJpaRepository;

@SpringBootTest  // Esta anotación carga el contexto completo de Spring Boot para la prueba
@Transactional
public class TestRepository {

	@Autowired
    private FlightEntityJpaRepository flightRepository;

	 @Test
	 public void testBlockSeats() {
	        // Dado un vuelo con 100 asientos disponibles
	        FlightEntity flight = new FlightEntity();
	        flight.setCompany("Aerolínea X");
	        flight.setOrigin("Madrid");
	        flight.setDestination("Barcelona");
	        flight.setDateTimeDeparture(LocalDateTime.of(2025, 2, 1, 10, 0, 0));
	        flight.setDateTimeArrival(LocalDateTime.of(2025, 2, 1, 11, 30, 0));
	        flight.setPrice(new BigDecimal("100.50"));
	        flight.setAvailableSeats(100);
	        flight.setBlockedSeats(0);
	        flight.setBlockExpiration(null);
	        
	        // Guardamos el vuelo en la base de datos (H2 en este caso)
	        flightRepository.save(flight);

	        // Cuando se bloquean 10 asientos
	        LocalDateTime expirationTime = LocalDateTime.now().plusHours(1);
	        int blockedSeats = flightRepository.blockSeats(flight.getIdFlight(), 10, expirationTime);

	        // Entonces, el número de asientos bloqueados debería ser 10
	        assertEquals(10, blockedSeats);
	        
	        // Verificamos si los asientos fueron bloqueados correctamente
	        FlightEntity updatedFlight = flightRepository.findById(flight.getIdFlight()).get();
	        assertEquals(10, updatedFlight.getBlockedSeats());
	    }
	 @Test
	 public void testReleaseExpiredBlocks() {
	     // Dado un vuelo con 10 asientos bloqueados y una fecha de expiración pasada
	     FlightEntity flight = new FlightEntity();
	     flight.setCompany("Aerolínea Y");
	     flight.setOrigin("Sevilla");
	     flight.setDestination("Valencia");
	     flight.setDateTimeDeparture(LocalDateTime.of(2025, 3, 1, 15, 0, 0));
	     flight.setDateTimeArrival(LocalDateTime.of(2025, 3, 1, 16, 30, 0));
	     flight.setPrice(new BigDecimal("120.75"));
	     flight.setAvailableSeats(100);
	     flight.setBlockedSeats(10);
	     flight.setBlockExpiration(LocalDateTime.now().minusHours(1)); // Expirado
	     
	     // Guardamos el vuelo en la base de datos
	     flightRepository.save(flight);

	     // Cuando se intenta liberar los bloques expirados
	     int releasedSeats = flightRepository.releaseExpiredBlocks(flight.getIdFlight(), 10, LocalDateTime.now());

	     // Entonces, el número de asientos bloqueados debería reducirse a 0
	     assertEquals(10, releasedSeats); // Confirmamos que se liberaron 10 asientos
	     FlightEntity updatedFlight = flightRepository.findById(flight.getIdFlight()).get();
	     assertEquals(0, updatedFlight.getBlockedSeats());
	 }

}
