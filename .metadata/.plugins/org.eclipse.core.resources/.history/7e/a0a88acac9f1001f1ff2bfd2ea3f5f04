package com.inicio;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;
import static util.JwtConstants.*;

import org.springframework.context.annotation.Bean;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JWTAuthorizationFilter extends BasicAuthenticationFilter {

	public JWTAuthorizationFilter(AuthenticationManager authenticationManager) {
		super(authenticationManager);
	}

	
	//funcion leer el token para extraer la info y pasarsela a spring security
	protected void doFilterInternal(HttpServletRequest req, HttpServletResponse res, FilterChain chain)
			throws IOException, ServletException {
        System.out.println("[JWT Filter] - Interceptando petición: " + req.getRequestURI());

		String header = req.getHeader(HEADER);
		if (header == null || !header.startsWith(PREFIX_TOKEN)) {
            System.out.println("[JWT Filter] - No hay token o formato incorrecto. Permitiendo continuar.");

			chain.doFilter(req, res);
			return;
		}
		
		//obtenemos los datos del usuario a partir del token
		UsernamePasswordAuthenticationToken authentication = getAuthentication(req);
		if(authentication!=null) {
            System.out.println(" [JWT Filter] - Usuario autenticado: " + authentication.getName());

			SecurityContextHolder.getContext().setAuthentication(authentication);

		}
		//la información del usuario se almacena en el contexto de seguridad
		//para que pueda ser utilizada por Spring security durante el 
		//proceso de autorización
	//	SecurityContextHolder.getContext().setAuthentication(authentication);
		chain.doFilter(req, res);
	}
	
	private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {
		//el token viene en la cabecera de la petición
		String token = request.getHeader(HEADER);
		if (token != null) {
			// Se procesa el token y se recupera el usuario y los roles.
		try {	Claims claims=Jwts.parserBuilder()
					.setSigningKey(KEY.getBytes())
					.build()
					.parseClaimsJws(token.replace(PREFIX_TOKEN, ""))
					.getBody();
			String user = claims.getSubject();
			Integer userId=claims.get("id_usuario",Integer.class); // he agrado esta linea
			List<String> authorities=(List<String>) claims.get("authorities");
			System.out.println("=== [JWT Filter] ===");
            System.out.println("Usuario autenticado: " + user);
            System.out.println("ID Usuario en token: " + userId);
            System.out.println("Roles: " + authorities);
			if (user != null) {
				// guardamos el id_usuario en atributo de peticion
                request.setAttribute("id_usuario", userId);

				//creamos el objeto con la información del usuario (usuario y roles)
				return new UsernamePasswordAuthenticationToken(user, null, authorities.stream()
													.map(SimpleGrantedAuthority::new)
													.collect(Collectors.toList()));
			}
			return null;
		}catch (Exception e) {
            System.out.println(" ERROR processing token: " + e.getMessage());
		}
	
	}
		return null;
	}
}
