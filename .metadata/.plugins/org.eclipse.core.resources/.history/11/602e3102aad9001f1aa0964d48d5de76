package com.repository;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Optional;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.transaction.annotation.Transactional;

import com.inicio.MicroserviceFlightApplication;
import com.model.FlightEntity;

@DataJpaTest // Configura solo la capa de persistencia para pruebas
@ActiveProfiles("test")
@ContextConfiguration(classes = MicroserviceFlightApplication.class) // Reemplaza con tu clase principal
public class TestRepository {
// https://stackoverflow.com/questions/47487609/unable-to-find-a-springbootconfiguration-you-need-to-use-contextconfiguration
    @Autowired
    private FlightEntityJpaRepository repository;

       	@Test
        public void testFindByIdFlight() {
            // Busca el vuelo con ID 1
            FlightEntity flight = repository.findById(1).orElse(null);

            // Asegúrate de que el vuelo no sea nulo
            assertNotNull(flight, "El vuelo con ID 1 debería existir en la base de datos.");

            // Verifica que los datos coincidan
            assertEquals("Iberia", flight.getCompany(), "La compañía del vuelo debería ser Iberia.");
            assertEquals(1, flight.getIdFlight(), "El ID del vuelo debería ser 1.");
    }
       	
       	@Test
        @Transactional
        @Rollback(false)
       	public void testBlockSeat() {
       		int idFlight = 1;
       	    int seatToBlock = 5;

       	    // Consulta inicial
       	    Optional<FlightEntity> beforeUpdateFlight = repository.findById(idFlight);
       	    FlightEntity flight = beforeUpdateFlight.orElseThrow(() -> new RuntimeException("Vuelo no encontrado"));
       	    System.out.println("Asientos disponibles: " + flight.getAvailableSeats());
       	    System.out.println("Asientos bloqueados antes: " + flight.getBlockedSeats());

       	    // Validar que la condición se cumpla
       	    int remainingSeats = flight.getAvailableSeats() - flight.getBlockedSeats();
       	    assertTrue(remainingSeats >= seatToBlock, "Debe haber suficientes asientos disponibles para bloquear");

       	    // Generar la fecha de expiración
       	    LocalDateTime expiration = LocalDateTime.now().plusMinutes(10).withNano(0);

       	    // Bloquear los asientos
       	    int rowsUpdated = repository.blockSeats(idFlight, seatToBlock, expiration);
       	    assertEquals(1, rowsUpdated, "Debería haberse actualizado una fila");

       	    // Consulta posterior a la actualización
       	    Optional<FlightEntity> updateFlight = repository.findById(idFlight);
       	    System.out.println("Asientos bloqueados después: " + updateFlight.get().getBlockedSeats());

       	    // Validaciones
       	    assertTrue(updateFlight.isPresent());
       	    assertEquals(10, updateFlight.get().getBlockedSeats()); // 5 iniciales + 5 bloqueados
       	    assertEquals(expiration, updateFlight.get().getBlockExpiration().withNano(0));
       	}
       	
/*
	 @Test
	 public void testBlockSeats() {
		// Crear vuelo
		    FlightEntity flight = new FlightEntity();
		    flight.setAvailableSeats(100);
		    flight.setBlockedSeats(0);
		    flight.setCompany("Test Airline");
		    flight.setOrigin("Madrid");
		    flight.setDestination("Barcelona");
		    flight.setDateTimeDeparture(LocalDateTime.of(2025, 2, 1, 10, 0));
		    flight.setDateTimeArrival(LocalDateTime.of(2025, 2, 1, 12, 0));
		    flightRepository.save(flight);

		    // Verifica los valores iniciales
		    FlightEntity savedFlight = flightRepository.findById(flight.getIdFlight()).get();
		    System.out.println("Initial Flight: " + savedFlight);
		    assertEquals(100, savedFlight.getAvailableSeats(),()->"Parecen que el valor esperado de plazas no es el correcto");
		    assertEquals(0, savedFlight.getBlockedSeats(),()->"Parecen que el valor esperado de bloquerosno es el correcto");

		    // Ejecutar blockSeats
		    LocalDateTime expiration = LocalDateTime.now().plusHours(2);
		    int updatedRows = flightRepository.blockSeats(savedFlight.getIdFlight(), 10, expiration);

		    // Verifica si se aplicaron los cambios
		    FlightEntity updatedFlight = flightRepository.findById(flight.getIdFlight()).get();
		    System.out.println("Updated Flight: " + updatedFlight);
		    assertEquals(10, updatedFlight.getBlockedSeats());
		    assertEquals(90, updatedFlight.getAvailableSeats() - updatedFlight.getBlockedSeats());
	    }
	 @Test
	 public void testReleaseExpiredBlocks() {
		 // Crear vuelo con bloques expirados
		    FlightEntity flight = new FlightEntity();
		    flight.setAvailableSeats(100);
		    flight.setBlockedSeats(10);
		    flight.setBlockExpiration(LocalDateTime.now().minusHours(1)); // Bloqueo expirado
		    flightRepository.save(flight);

		    // Verifica los valores iniciales
		    FlightEntity savedFlight = flightRepository.findById(flight.getIdFlight()).get();
		    assertEquals(10, savedFlight.getBlockedSeats());
		    assertTrue(savedFlight.getBlockExpiration().isBefore(LocalDateTime.now()));

		    // Ejecutar releaseExpiredBlocks
		    int updatedRows = flightRepository.releaseExpiredBlocks(savedFlight.getIdFlight(), 10, LocalDateTime.now());

		    // Verifica si se liberaron los bloques
		    FlightEntity updatedFlight = flightRepository.findById(flight.getIdFlight()).get();
		    assertEquals(0, updatedFlight.getBlockedSeats());
	 }
*/
}
